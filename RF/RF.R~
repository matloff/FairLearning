
# qeFair*() arguments:

#    data:  dataframe, training set; class labels col is a factor; other
#       columns may be factors
#    yName:  column name for outcome variable; vector indicates
#       regression, factor classification 
#    sensNames:  sensitive variables to be excluded from the ML analysis
#    possible algorithm-specific options
#    holdout:  size of holdout set, if any

# value:

#    see individual functions below

# predict() arguments:

#    object:  output from q*()
#    newx:  data frame of points to be predicted
#    possible options
 
# value:  R list with components as follows:
 
#    classification case:

#       ypreds:  R factor instance of predicted class labels, one element f
#          for each row of newx 
#       conditprobs:  vector/matrix of class probabilities; in the 2-class
#          case, a vector, the probabilities of Y = 1
 
#    regression case:

#       vector of predicted values

#########################  qeFairRF()  #################################

# selectProbs: 
 
qeFairRF <- function(data,yName,deweightNames,deweightVal,sensNames=NULL,
   nTree=500,minNodeSize=10,mtry = floor(sqrt(ncol(data))),
   holdout=floor(min(1000,0.1*nrow(data))))
{
   require(qeML)

   nonSensNames <- setdiff(names(data),sensNames)
   data1 <- data[nonSensNames]

   # standard qe*-series code for ML methods needing numeric X
   trainRow1 <- getRow1(data1,yName)
   if (!is.null(holdout)) splitData(holdout,data1)
   xyc <- getXY(data1,yName,xMustNumeric=FALSE,classif=FALSE,
      makeYdumms=FALSE)
   x <- xyc$x
   colnamesX <- colnames(x)
   xm <- as.matrix(x)

   rfout <- qeRFranger(data1,yName,deweightNames,deweightVal,
      nTree=nTree,minNodeSize=minNodeSize,mtry=mtry)

   srout <- list(rfout=rfout)
   srout$classif <- TRUE
   srout$deweightNames <- deweightNames
   srout$deweightVal <- deweightVal
   srout$sensNames <- sensNames
   srout$trainRow1 <- trainRow1
   class(srout) <- c('qeFairRF')
   if (!is.null(holdout)) {
      predictHoldout(srout)
      srout$holdIdxs <- holdIdxs
   } else {
      srout$holdIdxs <- 1:nrow(data)
      yCol <- which(names(data) == yName)
      dataX <- data1[,-yCol]
   browser()
      tmp <- qeRFranger(rfout,dataX)
      srout$holdoutPreds <- tmp$preds
   }
   if (!is.null(sensNames)) 
      srout$corrs <- corrsens(data,yName,srout,sensNames)
   srout
}

predict.qeFairRF <- function(object,newx)
{
   rfout <- object$rfout
   predict(rfout,newx)
}
 

